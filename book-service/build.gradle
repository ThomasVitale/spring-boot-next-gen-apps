plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.2'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.graalvm.buildtools.native' version '0.9.19'
}

group = 'com.thomasvitale'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

ext {
	set('testcontainersVersion', "1.17.6")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'net.ttddyy.observation:datasource-micrometer:1.0.1'
	implementation 'net.ttddyy.observation:datasource-micrometer-spring-boot:1.0.1'
	implementation 'io.micrometer:micrometer-tracing-bridge-otel'
	implementation 'io.opentelemetry:opentelemetry-exporter-zipkin'
	implementation 'org.flywaydb:flyway-core'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'com.github.loki4j:loki-logback-appender:1.3.2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('bootBuildImage') {
	imageName = "book-service"

	if (System.getProperty( "os.arch" ).toLowerCase().startsWith('aarch')) {
		// This builder is only for ARM64 systems.
		// For more info: https://github.com/thomasvitale/paketo-arm64
		builder = "ghcr.io/thomasvitale/builder-arm:tiny"
	}

	// Set to "true" if you want to build a native image with GraalVM.
	environment = ["BP_NATIVE_IMAGE": "false"]
}
